name: Security Scan

on:
  push:
    branches: [ master, main ]
  pull_request:
    branches: [ master, main ]
  schedule:
    # Run daily at 6 AM UTC
    - cron: '0 6 * * *'
  workflow_dispatch:

jobs:
  pip-audit:
    name: Scan Python Dependencies for CVEs
    runs-on: ubuntu-latest

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Set up Python
        uses: actions/setup-python@v5
        with:
          python-version: '3.11'

      - name: Install pip-audit
        run: |
          python -m pip install --upgrade pip
          pip install pip-audit

      - name: Create requirements file from manifest
        run: |
          # Extract requirements from manifest.json
          python -c "
          import json
          with open('custom_components/camera_snapshot_processor/manifest.json') as f:
              manifest = json.load(f)
          requirements = manifest.get('requirements', [])
          with open('requirements-manifest.txt', 'w') as f:
              for req in requirements:
                  f.write(req + '\n')
          "
          echo "Requirements from manifest.json:"
          cat requirements-manifest.txt

      - name: Run pip-audit on manifest requirements
        run: |
          pip-audit -r requirements-manifest.txt --desc --format json > audit-results.json || true

      - name: Display audit results
        run: |
          if [ -f audit-results.json ]; then
            python -c "
          import json
          with open('audit-results.json') as f:
              results = json.load(f)

          vulnerabilities = results.get('vulnerabilities', [])
          if vulnerabilities:
              print(f'❌ Found {len(vulnerabilities)} vulnerabilities:')
              for vuln in vulnerabilities:
                  pkg = vuln.get('name', 'unknown')
                  version = vuln.get('version', 'unknown')
                  vuln_id = vuln.get('id', 'unknown')
                  desc = vuln.get('description', 'No description')
                  fixed = vuln.get('fix_versions', [])
                  print(f'  - {pkg} {version}: {vuln_id}')
                  print(f'    {desc}')
                  if fixed:
                      print(f'    Fix: Upgrade to {fixed}')
              exit(1)
          else:
              print('✅ No vulnerabilities found!')
          "
          else
            echo "✅ No vulnerabilities found!"
          fi

      - name: Upload audit results as artifact
        if: always()
        uses: actions/upload-artifact@v4
        with:
          name: security-audit-results
          path: audit-results.json
          retention-days: 30

  dependency-review:
    name: Dependency Review
    runs-on: ubuntu-latest
    if: github.event_name == 'pull_request'

    steps:
      - name: Checkout code
        uses: actions/checkout@v4

      - name: Dependency Review
        uses: actions/dependency-review-action@v4
        with:
          fail-on-severity: moderate
          comment-summary-in-pr: true
